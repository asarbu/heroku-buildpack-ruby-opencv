#!/usr/bin/env bash
# bin/compile_opencv <build-dir> <cache-dir>

# fail fast
set -e

indent() {
  sed -u 's/^/       /'
}

build=$1
cache=$2

mkdir -p $build
mkdir -p $cache

cmake_version="3.5.2"
cmake_url="https://cmake.org/files/v3.5/cmake-${cmake_version}.tar.gz"
cmake_file="cmake-${cmake_version}.tar.gz"
cmake_tar_dir="cmake-${cmake_version}"

opencv_version="2.4.11"
opencv_dir="opencv-${opencv_version}"
opencv_file="${opencv_dir}.zip"
opencv_url="http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/${opencv_version}/${opencv_file}"

cache_target=${cache}/${cmake_file}
build_target=${build}/.heroku
target=/app/.heroku

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

# install cmake
if [ ! -f ${cache_target} ]; then
  echo "No cached compile detected. Building..." | indent
  cd $build

  echo "Compiling cmake v${cmake_version}..." | indent

  wget ${cmake_url} > ${cmake_file}
  tar zxf ${cmake_file}
  cd ${cmake_tar_dir}
  ./bootstrap --prefix=${target} | indent
  make | indent
  make install | indent
  cd ..

  tar czf ${cache_target} -C ${target} .
fi

mkdir -p $build_target
tar xzf $cache_target -C $build_target
PATH=$build_target/bin:$PATH

cache_target=$cache/$opencv_file
build_target=$build/.heroku

# install opencv
if [ ! -f $cache_target ]; then
  wget ${opencv_url} > ${opencv_file}
  unzip ${opencv_file}
  cd ${opencv_dir}
  mkdir release
  cd release
  
  # compile and install
  cmake -G "Unix Makefiles" -D CMAKE_CXX_COMPILER=/usr/bin/g++ CMAKE_C_COMPILER=/usr/bin/gcc -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D BUILD_FAT_JAVA_LIB=ON -D INSTALL_TO_MANGLED_PATHS=ON -D INSTALL_CREATE_DISTRIB=ON -D INSTALL_TESTS=ON -D ENABLE_FAST_MATH=ON -D WITH_IMAGEIO=ON -D BUILD_SHARED_LIBS=OFF -D WITH_GSTREAMER=ON ..
  make all -j4 # 4 cores
  sudo make install
fi

mkdir -p $build_target
tar xzf $cache_target -C $build_target

mkdir -p $build/.profile.d

ls -la $build/*
ls -la $target/*

echo "export PATH=\$target/bin:\$PATH" > $build/.profile.d/opencv.sh
